{"version":3,"sources":["logo.svg","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","request","require","override","css","_templateObject","axios","defaults","baseURL","process","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","singleFileChangedHandler","event","setState","selectedFile","target","files","pdfFileChangedHandler","pdfFile","pdfFileUploadHandler","loading","pdfData","FormData","state","append","name","post","headers","Accept-Language","accept","Content-Type","concat","_boundary","Access-Control-Allow-Origin","then","res","data","ocShowAlert","buttonText","fileUrl","location","getOCRDataHandler","catch","error","console","log","singleFileUploadHandler","wordList","status","code","fileName","options","uri","qs","language","detectOrientation","body","Ocp-Apim-Subscription-Key","response","obj","JSON","parse","extractedWords","c","regions","length","i","lines","j","words","text","err","message","background","arguments","undefined","alertContainer","document","querySelector","alertEl","createElement","textNode","createTextNode","setAttribute","$","appendChild","setTimeout","fadeOut","remove","selectedFiles","react_default","a","className","type","onChange","onClick","disabled","react_spinners","sizeUnit","size","color","encType","id","Component","App","react_router_dom","react_router","exact","path","component","Boolean","window","hostname","match","config","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.767cda4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport $ from \"jquery\";\nimport { css } from \"@emotion/core\";\nimport { ClipLoader } from \"react-spinners\";\nconst request = require(\"request\");\nconst path = require(\"path\");\n//or use ```import ClipLoader from \"react-spinner/ClipLoader\";```\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\nvar port = 4000;\naxios.defaults.baseURL = process.env.baseURL || \"http://localhost:3000\";\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedFile: null,\n      selectedFiles: null,\n      pdfFile: null,\n      loading: false,\n      buttonText: \"\",\n      wordList: \"\"\n    };\n  }\n  componentDidMount() {\n    this.setState({\n      loading: false,\n      buttonText: \"Upload\",\n      wordList: \"\"\n    });\n  }\n  singleFileChangedHandler = (event) => {\n    this.setState({\n      selectedFile: event.target.files[0]\n    });\n  };\n\n  pdfFileChangedHandler = (event) => {\n    this.setState({\n      pdfFile: event.target.files[0]\n    });\n  };\n  pdfFileUploadHandler = () => {\n    this.setState({\n      loading: true\n    });\n    const pdfData = new FormData();\n    if (this.state.pdfFile) {\n      pdfData.append(\"pdf\", this.state.pdfFile, this.state.pdfFile.name);\n      axios\n        .post(\"/api/image/pdf\", pdfData, {\n          headers: {\n            \"Accept-Language\": \"en-US,en;q=0.8\",\n            accept: \"application/json\",\n            \"Content-Type\": `multipart/form-data; boundary=${pdfData._boundary}`,\n            \"Access-Control-Allow-Origin\": \"*\"\n          }\n        })\n        .then((res) => {\n          let fileName = res.data;\n          this.ocShowAlert(\"File Uploaded Succesfully\", \"#3089cf\");\n          this.setState({ loading: false, buttonText: \"Upload\" });\n          let fileUrl = res.data.location;\n          this.getOCRDataHandler(fileUrl);\n        })\n        .catch((error) => {\n          console.log(error); //error handling for now, call alert function later\n          this.setState({\n            loading: false\n          });\n        });\n    } else {\n      console.log(\"Please upload a valid pdf file!\");\n      this.setState({\n        loading: false\n      });\n    }\n  };\n  singleFileUploadHandler = () => {\n    this.setState({\n      loading: true,\n      buttonText: \"Uploading\",\n      wordList: \"\"\n    });\n    this.buttonText = \"Uploading\";\n    const data = new FormData();\n    //if file selected\n    if (this.state.selectedFile) {\n      data.append(\n        \"image\",\n        this.state.selectedFile,\n        this.state.selectedFile.name\n      ); //setting image formdata object: uploaded file\n      axios\n        .post(\"/api/image/upload\", data, {\n          headers: {\n            \"Accept-Language\": \"en-US,en;q=0.8\",\n            accept: \"application/json\",\n            \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n            \"Access-Control-Allow-Origin\": \"*\"\n          }\n        })\n        .then((res) => {\n          if (res.status === 200) {\n            if (res.data.error) {\n              //file size was larger than 2mb\n              if (\"LIMIT_FILE_SIZE\" === res.data.error.code) {\n                this.ocShowAlert(\"Max size: 2MB\", \"red\");\n                this.setState({ loading: false, buttonText: \"Upload\" });\n              } else {\n                //if not, show error to user\n                console.log(res.data);\n                this.ocShowAlert(res.data.error, \"red\");\n                this.setState({ loading: false, buttonText: \"Upload\" });\n              }\n            } else {\n              let fileName = res.data;\n              console.log(\"filedata\", fileName);\n              this.ocShowAlert(\"File Uploaded Succesfully\", \"#3089cf\");\n              let fileUrl = res.data.location;\n              this.getOCRDataHandler(fileUrl);\n            }\n          }\n        })\n        .catch((error) => {\n          this.ocShowAlert(error, \"red\");\n        });\n    } else {\n      this.ocShowAlert(\"Please upload a valid image file\", \"red\");\n      this.setState({ loading: false, buttonText: \"Upload\" });\n    }\n  };\n\n  getOCRDataHandler = (fileUrl) => {\n    //getting and rendering the extracted text from the image url\n    const ocrSubKey = process.env.REACT_APP_OCRKEY;\n    const uriBase =\n      \"https://eastus.api.cognitive.microsoft.com/vision/v2.0/ocr\";\n    const params = {\n      language: \"unk\",\n      detectOrientation: \"true\"\n    };\n    const options = {\n      uri: uriBase,\n      qs: params,\n      body: '{\"url\": ' + '\"' + fileUrl + '\"}',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Ocp-Apim-Subscription-Key\": ocrSubKey\n      }\n    };\n    request.post(options, (error, response, body) => {\n      if (error) {\n        console.log(\"Error: \", error);\n        return;\n      }\n      let obj = JSON.parse(body);\n      let extractedWords = \"Extracted Words: \";\n      try {\n        for (var c = 0; c < obj.regions.length; c++) {\n          for (var i = 0; i < obj.regions[c].lines.length; i++) {\n            for (var j = 0; j < obj.regions[c].lines[i].words.length; j++) {\n              extractedWords += obj.regions[c].lines[i].words[j].text + \", \";\n            }\n          }\n        }\n        if (extractedWords === \"Extracted Words: \") {\n          extractedWords += \"No words were found!\";\n        }\n        this.setState({\n          loading: false,\n          buttonText: \"Upload\",\n          wordList: extractedWords\n        });\n      } catch (err) {\n        extractedWords += \"No words were found!\";\n        this.setState({\n          loading: false,\n          buttonText: \"Upload\",\n          wordList: extractedWords\n        });\n      }\n    });\n  };\n\n  //alert showing function\n  ocShowAlert = (message, background = \"#3089cf\") => {\n    let alertContainer = document.querySelector(\".home__alert\"),\n      alertEl = document.createElement(\"div\");\n    let textNode = document.createTextNode(message);\n    alertEl.setAttribute(\"class\", \"home__alert--pop-up\");\n    $(alertEl).css(\"background\", background);\n    alertEl.appendChild(textNode);\n    alertContainer.appendChild(alertEl); // appending text to div element\n    setTimeout(function() {\n      $(alertEl).fadeOut(\"slow\");\n      $(alertEl).remove();\n    }, 3000);\n  };\n\n  render() {\n    return (\n      <div className=\"home\">\n        <div className=\"home__alert\" />\n        <div className=\"card border-light mb-3 mt-5 home__card\">\n          <div className=\"home__card__header\">\n            <h3 className=\"home__card__header--heading\">Single Image Upload</h3>\n            <p className=\"home__card__header--text\">Max Upload Size 2mb</p>\n          </div>\n          <div className=\"home__card__body\">\n            <p className=\"home__card__body--text\">\n              Upload an image with text to be extracted:\n            </p>\n            <input\n              className=\"home__card__body--fileInput\"\n              type=\"file\"\n              onChange={this.singleFileChangedHandler}\n            />\n            <div className=\"mt-5 home__card__submitForm\">\n              <button\n                className=\"btn btn-info home__card__submitForm--button\"\n                onClick={this.singleFileUploadHandler}\n                disabled={this.state.loading}\n              >\n                {this.state.buttonText}\n              </button>\n              <div className=\"sweet-loading\">\n                <ClipLoader\n                  css={override}\n                  sizeUnit={\"px\"}\n                  size={150}\n                  color={\"#123abc\"}\n                  loading={this.state.loading}\n                />\n              </div>\n              <div className=\"home__card__result\">\n                <h3 className=\"home__card__result--text\">\n                  {this.state.wordList}\n                </h3>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"home__pdf\">\n          <form className=\"home__pdf__form\" encType=\"multipart/form-data\">\n            <p className=\"home__pdf__form--text\">\n              Upload a pdf with text in it\n            </p>\n            <input\n              className=\"home__pdf__form--fileInput\"\n              type=\"file\"\n              name=\"pdf\"\n              id=\"pdf\"\n              onChange={this.pdfFileChangedHandler}\n            />\n            <div className=\"home__pdf__submitForm\">\n              <button\n                className=\"btn btn-info home__pdf__submitForm--button\"\n                onClick={this.pdfFileUploadHandler}\n                disabled={this.state.loading}\n              >\n                Upload\n              </button>\n              <div className=\"home__card__result\">\n                <h3 className=\"home__card__result--text\">Result</h3>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Home from \"./components/Home/Home\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <Route exact path=\"/\" component={Home} />\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nrequire(\"dotenv\").config();\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}