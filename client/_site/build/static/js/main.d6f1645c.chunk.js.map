{"version":3,"sources":["logo.svg","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","require","override","css","_templateObject","axios","defaults","baseURL","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","singleFileChangedHandler","event","setState","selectedFile","target","files","singleFileUploadHandler","e","type","className","loading","buttonText","wordList","resultString","data","FormData","state","append","name","post","headers","Accept-Language","accept","Content-Type","concat","_boundary","Access-Control-Allow-Origin","then","res","status","error","code","ocShowAlert","extractedText","imageUrl","catch","message","background","arguments","length","undefined","alertContainer","document","getElementById","alertEl","createElement","textNode","createTextNode","setAttribute","$","appendChild","setTimeout","fadeOut","remove","selectedFiles","pdfFile","react_default","a","id","onChange","onClick","disabled","react_spinners","sizeUnit","size","color","encType","Component","App","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","config","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,ohBCKxBC,EAAQ,KACXA,EAAQ,KADrB,IAGMC,EAAWC,cAAHC,KAMdC,IAAMC,SAASC,QAAU,+CAEJC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAmBRQ,yBAA2B,SAACC,GAC1BR,EAAKS,SAAS,CACZC,aAAcF,EAAMG,OAAOC,MAAM,MAtBlBZ,EAyBnBa,wBAA0B,SAACC,GACzB,IAAMC,EAAOD,EAAEH,OAAOK,UACtB,GAAY,gBAATD,EAAuB,CACxBf,EAAKS,SAAS,CACZQ,SAAS,EACTC,WAAY,YACZC,SAAU,GACVC,aAAc,oCAEhBpB,EAAKkB,WAAa,YAClB,IAAMG,EAAO,IAAIC,SAEbtB,EAAKuB,MAAMb,cACbW,EAAKG,OACH,QACAxB,EAAKuB,MAAMb,aACXV,EAAKuB,MAAMb,aAAae,MAE1B9B,IACG+B,KAAK,iEAAkEL,EAAM,CAC5EM,QAAS,CACPC,kBAAmB,iBACnBC,OAAQ,mBACRC,eAAA,iCAAAC,OAAiDV,EAAKW,WACtDC,8BAA+B,OAGlCC,KAAK,SAACC,GACL,GAAmB,MAAfA,EAAIC,OACN,GAAID,EAAId,KAAKgB,MAEP,oBAAsBF,EAAId,KAAKgB,MAAMC,MACvCtC,EAAKuC,YAAY,gBAAiB,OAClCvC,EAAKS,SAAS,CAAEQ,SAAS,EAAOC,WAAY,aAI5ClB,EAAKuC,YAAYJ,EAAId,KAAKgB,MAAO,OACjCrC,EAAKS,SAAS,CAAEQ,SAAS,EAAOC,WAAY,gBAEzC,CACUiB,EAAId,KAEnBrB,EAAKS,SAAS,CACZQ,SAAS,EACTE,SAAUgB,EAAId,KAAKmB,cACnBtB,WAAY,SACZE,aAAc,oBAEhBpB,EAAKuC,YAAY,4BAA6B,WAChCJ,EAAId,KAAKoB,YAI5BC,MAAM,SAACL,GACNrC,EAAKuC,YAAYF,EAAO,WAG5BrC,EAAKuC,YAAY,mCAAoC,OACrDvC,EAAKS,SAAS,CAAEQ,SAAS,EAAOC,WAAY,iBAE5C,GAAY,cAATH,EAAqB,CAC1Bf,EAAKS,SAAS,CACZQ,SAAS,EACTC,WAAY,YACZC,SAAU,GACVC,aAAc,oCAEhBpB,EAAKkB,WAAa,YAClB,IAAMG,EAAO,IAAIC,SAEbtB,EAAKuB,MAAMb,cACbW,EAAKG,OACH,QACAxB,EAAKuB,MAAMb,aACXV,EAAKuB,MAAMb,aAAae,MAE1B9B,IACG+B,KAAK,4DAA6DL,EAAM,CACvEM,QAAS,CACPC,kBAAmB,iBACnBC,OAAQ,mBACRC,eAAA,iCAAAC,OAAiDV,EAAKW,WACtDC,8BAA+B,OAGlCC,KAAK,SAACC,GACL,GAAmB,MAAfA,EAAIC,OACN,GAAID,EAAId,KAAKgB,MAEP,oBAAsBF,EAAId,KAAKgB,MAAMC,MACvCtC,EAAKuC,YAAY,gBAAiB,OAClCvC,EAAKS,SAAS,CAAEQ,SAAS,EAAOC,WAAY,aAI5ClB,EAAKuC,YAAYJ,EAAId,KAAKgB,MAAO,OACjCrC,EAAKS,SAAS,CAAEQ,SAAS,EAAOC,WAAY,gBAEzC,CACUiB,EAAId,KAEnBrB,EAAKS,SAAS,CACZQ,SAAS,EACTE,SAAUgB,EAAId,KAAKmB,cACnBtB,WAAY,SACZE,aAAc,oBAEhBpB,EAAKuC,YAAY,4BAA6B,WAChCJ,EAAId,KAAKoB,YAI5BC,MAAM,SAACL,GACNrC,EAAKuC,YAAYF,EAAO,WAG5BrC,EAAKuC,YAAY,mCAAoC,OACrDvC,EAAKS,SAAS,CAAEQ,SAAS,EAAOC,WAAY,cA/I/BlB,EAqJnBuC,YAAc,SAACI,GAAoC,IAA3BC,EAA2BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAd,UAC/BG,EAAiBC,SAASC,eAAe,SAC7CC,EAAUF,SAASG,cAAc,OAC7BC,EAAWJ,SAASK,eAAeX,GACvCQ,EAAQI,aAAa,QAAS,uBAC9BC,IAAEL,GAAS1D,IAAI,aAAcmD,GAC7BO,EAAQM,YAAYJ,GACpBL,EAAeS,YAAYN,GAC3BO,WAAW,WACTF,IAAEL,GAASQ,QAAQ,QACnBH,IAAEL,GAASS,UACV,MA9JH5D,EAAKuB,MAAQ,CACXb,aAAc,KACdmD,cAAe,KACfC,QAAS,KACT7C,SAAS,EACTC,WAAY,GACZC,SAAU,GACVC,aAAc,IATCpB,mFAajBG,KAAKM,SAAS,CACZQ,SAAS,EACTC,WAAY,SACZC,SAAU,GACVC,aAAc,sCAmJhB,OACE2C,EAAAC,EAAAZ,cAAA,OAAKpC,UAAU,QACb+C,EAAAC,EAAAZ,cAAA,OAAKpC,UAAU,cAAciD,GAAG,UAChCF,EAAAC,EAAAZ,cAAA,OAAKpC,UAAU,0CACb+C,EAAAC,EAAAZ,cAAA,OAAKpC,UAAU,sBACb+C,EAAAC,EAAAZ,cAAA,MAAIpC,UAAU,+BAAd,uBACA+C,EAAAC,EAAAZ,cAAA,KAAGpC,UAAU,4BAAb,wBAEF+C,EAAAC,EAAAZ,cAAA,OAAKpC,UAAU,oBACb+C,EAAAC,EAAAZ,cAAA,KAAGpC,UAAU,0BAAb,4CAGA+C,EAAAC,EAAAZ,cAAA,SACEpC,UAAU,8BACVD,KAAK,OACLmD,SAAU/D,KAAKI,2BAEjBwD,EAAAC,EAAAZ,cAAA,OAAKpC,UAAU,+BACb+C,EAAAC,EAAAZ,cAAA,UACEpC,UAAU,YACVmD,QAAShE,KAAKU,wBACduD,SAAUjE,KAAKoB,MAAMN,SAEpBd,KAAKoB,MAAML,YAEd6C,EAAAC,EAAAZ,cAAA,OAAKpC,UAAU,iBACb+C,EAAAC,EAAAZ,cAACiB,EAAA,WAAD,CACE5E,IAAKD,EACL8E,SAAU,KACVC,KAAM,IACNC,MAAO,UACPvD,QAASd,KAAKoB,MAAMN,WAGxB8C,EAAAC,EAAAZ,cAAA,OAAKpC,UAAU,sBACb+C,EAAAC,EAAAZ,cAAA,OAAKpC,UAAU,sBACb+C,EAAAC,EAAAZ,cAAA,MAAIpC,UAAU,4BAA4Bb,KAAKoB,MAAMH,eAEvD2C,EAAAC,EAAAZ,cAAA,MAAIpC,UAAU,4BACXb,KAAKoB,MAAMJ,cAMtB4C,EAAAC,EAAAZ,cAAA,OAAKpC,UAAU,aACb+C,EAAAC,EAAAZ,cAAA,QAAMpC,UAAU,kBAAkByD,QAAQ,uBACxCV,EAAAC,EAAAZ,cAAA,KAAGpC,UAAU,yBAAb,uCAGA+C,EAAAC,EAAAZ,cAAA,SACEpC,UAAU,6BACVD,KAAK,OACLU,KAAK,MACLwC,GAAG,MACHC,SAAU/D,KAAKI,2BAEjBwD,EAAAC,EAAAZ,cAAA,OAAKpC,UAAU,yBACb+C,EAAAC,EAAAZ,cAAA,UACEpC,UAAU,cACVmD,QAAShE,KAAKU,wBACduD,SAAUjE,KAAKoB,MAAMN,SAEpBd,KAAKoB,MAAML,uBApOMwD,8BCCnBC,MAZf,WACE,OACEZ,EAAAC,EAAAZ,cAAA,OAAKpC,UAAU,OACb+C,EAAAC,EAAAZ,cAACwB,EAAA,EAAD,KACEb,EAAAC,EAAAZ,cAAA,WACEW,EAAAC,EAAAZ,cAACyB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlF,QCEvBmF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbN9F,EAAQ,KAAU+F,SAClBC,IAASC,OAAOzB,EAAAC,EAAAZ,cAACqC,EAAD,MAASxC,SAASC,eAAe,SD2H3C,kBAAmBwC,WACrBA,UAAUC,cAAcC,MAAM1D,KAAK,SAAA2D,GACjCA,EAAaC","file":"static/js/main.d6f1645c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport $ from \"jquery\";\nimport { css } from \"@emotion/core\";\nimport { ClipLoader } from \"react-spinners\";\nconst request = require(\"request\");\nconst path = require(\"path\");\n//or use ```import ClipLoader from \"react-spinner/ClipLoader\";```\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\nvar port = 4000;\naxios.defaults.baseURL = \"https://cosmic-tenure-241517.appspot.com\";\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedFile: null,\n      selectedFiles: null,\n      pdfFile: null,\n      loading: false,\n      buttonText: \"\",\n      wordList: \"\",\n      resultString: \"\"\n    };\n  }\n  componentDidMount() {\n    this.setState({\n      loading: false,\n      buttonText: \"Upload\",\n      wordList: \"\",\n      resultString: \"\"\n    });\n  }\n  singleFileChangedHandler = (event) => {\n    this.setState({\n      selectedFile: event.target.files[0]\n    });\n  };\n  singleFileUploadHandler = (e) => {\n    const type = e.target.className;\n    if(type === \"imageUpload\"){\n      this.setState({\n        loading: true,\n        buttonText: \"Uploading\",\n        wordList: \"\",\n        resultString: \"Extracting text, Please Wait...\"\n      });\n      this.buttonText = \"Uploading\";\n      const data = new FormData();\n      //if file selected\n      if (this.state.selectedFile) {\n        data.append(\n          \"image\",\n          this.state.selectedFile,\n          this.state.selectedFile.name\n        ); //setting image formdata object: uploaded file\n        axios\n          .post(\"https://cosmic-tenure-241517.appspot.com/api/image/uploadImage\", data, {\n            headers: {\n              \"Accept-Language\": \"en-US,en;q=0.8\",\n              accept: \"application/json\",\n              \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n              \"Access-Control-Allow-Origin\": \"*\"\n            }\n          })\n          .then((res) => {\n            if (res.status === 200) {\n              if (res.data.error) {\n                //file size was larger than 2mb\n                if (\"LIMIT_FILE_SIZE\" === res.data.error.code) {\n                  this.ocShowAlert(\"Max size: 2MB\", \"red\");\n                  this.setState({ loading: false, buttonText: \"Upload\" });\n                } else {\n                  //if not, show error to user\n                \n                  this.ocShowAlert(res.data.error, \"red\");\n                  this.setState({ loading: false, buttonText: \"Upload\" });\n                }\n              } else {\n                let fileName = res.data;\n        \n                this.setState({\n                  loading: false,\n                  wordList: res.data.extractedText,\n                  buttonText: \"Upload\",\n                  resultString: \"Extracted Text:\"\n                });\n                this.ocShowAlert(\"File Uploaded Succesfully\", \"#3089cf\");\n                let fileUrl = res.data.imageUrl;\n              }\n            }\n          })\n          .catch((error) => {\n            this.ocShowAlert(error, \"red\");\n          });\n      } else {\n        this.ocShowAlert(\"Please upload a valid image file\", \"red\");\n        this.setState({ loading: false, buttonText: \"Upload\" });\n      }\n  }else if(type === \"pdfUpload\"){\n      this.setState({\n        loading: true,\n        buttonText: \"Uploading\",\n        wordList: \"\",\n        resultString: \"Extracting text, Please Wait...\"\n      });\n      this.buttonText = \"Uploading\";\n      const data = new FormData();\n      //if file selected\n      if (this.state.selectedFile) {\n        data.append(\n          \"image\",\n          this.state.selectedFile,\n          this.state.selectedFile.name\n        ); //setting image formdata object: uploaded file\n        axios\n          .post(\"https://cosmic-tenure-241517.appspot.com/api/image/upload\", data, {\n            headers: {\n              \"Accept-Language\": \"en-US,en;q=0.8\",\n              accept: \"application/json\",\n              \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n              \"Access-Control-Allow-Origin\": \"*\"\n            }\n          })\n          .then((res) => {\n            if (res.status === 200) {\n              if (res.data.error) {\n                //file size was larger than 2mb\n                if (\"LIMIT_FILE_SIZE\" === res.data.error.code) {\n                  this.ocShowAlert(\"Max size: 2MB\", \"red\");\n                  this.setState({ loading: false, buttonText: \"Upload\" });\n                } else {\n                  //if not, show error to user\n                \n                  this.ocShowAlert(res.data.error, \"red\");\n                  this.setState({ loading: false, buttonText: \"Upload\" });\n                }\n              } else {\n                let fileName = res.data;\n        \n                this.setState({\n                  loading: false,\n                  wordList: res.data.extractedText,\n                  buttonText: \"Upload\",\n                  resultString: \"Extracted text:\"\n                });\n                this.ocShowAlert(\"File Uploaded Succesfully\", \"#3089cf\");\n                let fileUrl = res.data.imageUrl;\n              }\n            }\n          })\n          .catch((error) => {\n            this.ocShowAlert(error, \"red\");\n          });\n      } else {\n        this.ocShowAlert(\"Please upload a valid image file\", \"red\");\n        this.setState({ loading: false, buttonText: \"Upload\" });\n      }\n    }\n   \n  };\n  //alert showing function\n  ocShowAlert = (message, background = \"#3089cf\") => {\n    let alertContainer = document.getElementById(\"alert\"),\n    alertEl = document.createElement(\"div\");\n    let textNode = document.createTextNode(message);\n    alertEl.setAttribute(\"class\", \"home__alert--pop-up\");\n    $(alertEl).css(\"background\", background);\n    alertEl.appendChild(textNode);\n    alertContainer.appendChild(alertEl); // appending text to div element\n    setTimeout(function() {\n      $(alertEl).fadeOut(\"slow\");\n      $(alertEl).remove();\n    }, 3000);\n  };\n\n  render() {\n    return (\n      <div className=\"home\">\n        <div className=\"home__alert\" id=\"alert\" />\n        <div className=\"card border-light mb-3 mt-5 home__card\">\n          <div className=\"home__card__header\">\n            <h3 className=\"home__card__header--heading\">Single Image Upload</h3>\n            <p className=\"home__card__header--text\">Max Upload Size 2mb</p>\n          </div>\n          <div className=\"home__card__body\">\n            <p className=\"home__card__body--text\">\n              Upload an pdf with text to be extracted:\n            </p>\n            <input\n              className=\"home__card__body--fileInput\"\n              type=\"file\"\n              onChange={this.singleFileChangedHandler}\n            />\n            <div className=\"mt-5 home__card__submitForm\">\n              <button\n                className=\"pdfUpload\"\n                onClick={this.singleFileUploadHandler}\n                disabled={this.state.loading}\n              >\n                {this.state.buttonText}\n              </button>\n              <div className=\"sweet-loading\">\n                <ClipLoader\n                  css={override}\n                  sizeUnit={\"px\"}\n                  size={150}\n                  color={\"#123abc\"}\n                  loading={this.state.loading}\n                />\n              </div>\n              <div className=\"home__card__result\">\n                <div className=\"home__card__result\">\n                  <h3 className=\"home__card__result--text\">{this.state.resultString}</h3>\n                </div>\n                <h3 className=\"home__card__result--text\">\n                  {this.state.wordList}\n                </h3>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"home__pdf\">\n          <form className=\"home__pdf__form\" encType=\"multipart/form-data\">\n            <p className=\"home__pdf__form--text\">\n              Upload a image file with text in it\n            </p>\n            <input\n              className=\"home__pdf__form--fileInput\"\n              type=\"file\"\n              name=\"pdf\"\n              id=\"pdf\"\n              onChange={this.singleFileChangedHandler}\n            />\n            <div className=\"home__pdf__submitForm\">\n              <button\n                className=\"imageUpload\"\n                onClick={this.singleFileUploadHandler}\n                disabled={this.state.loading}\n              >\n                {this.state.buttonText}\n              </button>\n        \n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Home from \"./components/Home/Home\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <Route exact path=\"/\" component={Home} />\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nrequire(\"dotenv\").config();\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}